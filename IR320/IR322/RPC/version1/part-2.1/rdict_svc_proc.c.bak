/*
 * This is sample code generated by rpcgen.
 * These are only templates and you can use them
 * as a guideline for developing your own functions.
 */

#include "rdict.h"
#include <stdlib.h>
#include <stdio.h>
#include <ctype.h>
#include <string.h>

#define	MAXWORD	50		/* maximum length of a command or word	*/
#define DICTSIZ 100		/* maximum number of entries in diction.*/
char	dict[DICTSIZ][MAXWORD+1];/* storage for a dictionary of words	*/
int	nwords = 0;		/* number of words in the dictionary	*/

int *
initw_1_svc(void *argp, struct svc_req *rqstp)
{
	static int  result;

	nwords = 0;
	result = 1;

	printf("# INIT OK");
	return &result;
}

// This function inserts word in the dictionary
int *
insertw_1_svc(char **argp, struct svc_req *rqstp)
{
	static int  result;

	strcpy(dict[nwords], (char*)*argp);	 /* store word(s) in the dictionary */
	nwords++;
	result=nwords;

	printf("# INJECTION de %d : %s",nwords,*argp); /* confirmation message */
	return &result;
}

// This function delete word from dictionary
int *
deletew_1_svc(char **argp, struct svc_req *rqstp)
{
	static int result;
	int i;

	result=0;
	for (i=0 ; i<nwords ; i++){
		// Search the word
		if (strcmp((char*)*argp, dict[i]) == 0) {
			nwords--;
			strcpy(dict[i], dict[nwords]); /* Replace the word to delete by the last entry in the dictionnary */
			result=1;
			printf("Word : %s deleted from dictionary\n", *argp); /* confirmation message */
			break;
		}
	}
	if (result==0)
	printf("# SUPPRESSION de  %s is absent from dictionary\n", *argp); /* Error message */


	return &result;
}


// This function look for a word in the dictionary
int *
lookupw_1_svc(char **argp, struct svc_req *rqstp)
{
	static int result=0;
	int i;

	result=0;
	for (i=0 ; i<nwords ; i++){
		// Search the word
		if (strcmp(*argp, dict[i]) == 0){
			result=1;
			printf("Word %s found in the dictionary\n", *argp);
			break;
		}
	}

	if (result==0)
		printf("Word %s is absent from dictionary\n", *argp); /* Error message */

	return &result;
}
